#include<stdio.h>
#include<iostream>
#include<unordered_map>
#include<string>
#include<stack>
#include<minmax.h>
using namespace std;

/*
给你两个二进制字符串，返回它们的和（用二进制表示）。
输入为 非空 字符串且只包含数字 1 和 0。
*/

/* 实例：
输入: a = "1010", b = "1011"
输出: "10101"

1010 + 1011 = 10101
*/

/* 步骤：
首先让两个字符串等长，若不等长，在短的字符串前补零，否则之后的操作会超出索引。
然后从后到前遍历所有的位数，同位相加，这里有一个点，用的是字符相加，利用 ASCII 码，
字符在内部都用数字表示，我们不需要知道具体数值，但可知 ‘0’-‘0’ = 0， ‘0’+1=‘1’，以此类推 。字符的加减，大小比较，实际上都是内部数字的加减，大小比较

判断相加后的字符，若大于等于字符 ‘2’‘2’，下一位需要进一
第 00 位数的相加在这里是单独处理的，因为它可能涉及到字符的插入（即是否需要在最前面加一位数 ‘1’‘1’
*/

class Solution {
public: // 
    string addBinary(string a, string b) {
        int al = a.size();
        int bl = b.size();

        while (al < bl) 
        { //让两个字符串等长，若不等长，在短的字符串前补零，否则之后的操作会超出索引
            a = '0' + a; // 前插方法！！注意
            ++al;
        }
        while (al > bl)
        {
            b = '0' + b;
            ++bl;
        }


        for (int j = a.size() - 1; j > 0; --j) //从后到前遍历所有的位数，同位相加，注意，最高位不进入此循环。
        {
            a[j] = a[j] - '0' + b[j]; // 0字符的ASCII码就是48！！1为49，2为50！！ 注意a是-48了，但b并没有-48，所以计算后仍为ASCII码。
            if (a[j] >= '2') //若大于等于字符‘2’，需要进一
            {
                a[j] = (a[j] - '0') % 2 + '0'; // +-'0'字符会自动转化为ASCII码的机器数！
                a[j - 1] = a[j - 1] + 1;
            }
        }

        a[0] = a[0] - '0' + b[0]; //将ab的第0位相加  
        if (a[0] >= '2') //若大于等于2，需要进一
        {
            a[0] = (a[0] - '0') % 2 + '0';
            a = '1' + a;
        }
        return a;
    }
};